{
  
    
        "post0": {
            "title": "Retrieving images from the BDGBP gene expression project",
            "content": "The BDGP project shares metadata about the collected images as CSV files . images | annotations | . image_metadata = &quot;https://insitu.fruitfly.org/insitu-mysql-dump/insitu_images.csv.gz&quot; image_annotations = &quot;https://insitu.fruitfly.org/insitu-mysql-dump/insitu_annot.csv.gz&quot; . Image metadata . from PIL import Image from pathlib import Path from io import BytesIO import pandas as pd import requests import matplotlib.pyplot as plt . After some trial and error, I figured out that the CSV files are latin1 encoded (e.g. not UTF-8). The provided files do not contain column names, so I added them myself. . images = pd.read_csv(image_metadata, header=None, compression=&quot;gzip&quot;, encoding=&quot;latin1&quot;, index_col=False, names=[&#39;id&#39;,&#39;symbol&#39;, &#39;annotation_symbol&#39;, &#39;FBgn&#39;, &#39;cDNA_clone&#39;, &#39;path&#39;, &#39;stage&#39;, &#39;pov&#39;, &#39;comment&#39;, &#39;resolution&#39;]) annotations = pd.read_csv(image_annotations, header=None, compression=&quot;gzip&quot;, encoding=&quot;latin1&quot;, index_col=False, names=[&#39;id&#39;, &#39;annoation_symbol&#39;, &#39;FBgn&#39;, &#39;stage&#39;, &#39;description&#39;]) . images.sample(5, random_state=123).style . id symbol annotation_symbol FBgn cDNA_clone path stage pov comment resolution . 14685 CG1139 | CG1139 | CG1139 | FBgn0035300 | LP06969-dg | production_images/insituLP06969-dg_1.jpe | 1 | nan | nan | nan | . 114051 CG7263 | AIF | AIF | FBgn0031392 | FI05215 | img_dir_179/insitu179269.jpe | 6 | lateral | nan | nan | . 1318 CG10072 | sgl | sgl | FBgn0010851 | SD09476 | img_dir_10/insitu10741.jpe | 6 | lateral | AP_inverted | low | . 10732 CG11048 | CG11048 | CG11048 | FBgn0034487 | GH24459 | img_dir_17/insitu17662.jpe | 2 | lateral | nan | low | . 73804 CG3297 | mnd | mnd | FBgn0002778 | LD25378-dg | img_dir_63/insitu63344.jpe | 3 | lateral | nan | low | . annotations.sample(5, random_state=123).style . id annoation_symbol FBgn stage description . 29365 CG17158 | cpb | FBgn0011570 | 5 | procrystal cell | . 30863 CG17530 | GstE6 | FBgn0063494 | 6 | embryonic dorsal epidermis | . 73387 CG6854 | CG6854 | FBgn0036478 | 6 | embryonic/larval muscle system | . 70738 CG6417 | Oatp33Eb | FBgn0032435 | 6 | embryonic proventriculus inner layer | . 26431 CG1572 | CG1572 | FBgn0030309 | 6 | ventral midline | . The stages column indicates the 17 developmental stages of Drosophila melanogaster development, binned as follows: . Stages Bin . Stage 1-3 | 1 | . Stage 4-6 | 2 | . Stage 7-8 | 3 | . Stage 9-10 | 4 | . Stage 11-12 | 5 | . Stage 13-16 | 6 | . Image files . The actual images should be available for download on the BDGP FTP server, but right now, that pub subdirectory does not contain the expected insitu_image_storage folder. I have contacted a BDGP Scientist and asked for help locating it. . In the meantime, I can scrape images that are served via http. . For example, the following thumbnail image of a staining for transcripts of the 18w gene is available at https://insitu.fruitfly.org/insitu_image_storage/thumbnails/img_dir_101/insitu101409.jpe . . The full sized image can be found at https://insitu.fruitfly.org/insitu_image_storage/img_dir_101/insitu101409.jpe . . The path to the image files can be constructed from the shared root: . https://insitu.fruitfly.org/insitu_image_storage/thumbnails/ and the path column in the image annotation CSV file. . For example, here are 10 randomly selected images: . root = &#39;https://insitu.fruitfly.org/insitu_image_storage/thumbnails/&#39; paths = images.sample(10, random_state=123).path.tolist() def retrieve_image(root, path): url = root + path response = requests.get(url) return Image.open(BytesIO(response.content)) thumbnails = [retrieve_image(root, x) for x in paths] . plt.figure(figsize=(15,4)) for num, x in enumerate(thumbnails): plt.subplot(1,len(thumbnails),num+1) plt.axis(&#39;off&#39;) plt.imshow(x) . The path to each image can be constructed by concatenating the FTP server&#39;s URL with the relative path provided in the image metadata file. .",
            "url": "https://tomsing1.github.io/blog/bdgp/python/2020/12/11/Retrieving-BDGP-images.html",
            "relUrl": "/bdgp/python/2020/12/11/Retrieving-BDGP-images.html",
            "date": " ‚Ä¢ Dec 11, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastai: Drosophila embryogenesis",
            "content": "To learn more about deep learning methods, I have begun working through the fastai book. . As always, the best way for me to learn is to dive into a small project of my own - an attitude strongly supported by the fastai authors. . The book uses image classification as an example, so I decided to look for a suitable image analysis project to help me learn. . Years ago, I studied the development of the fruitfly , especially the formation of its muscle system during embryogenesis. . . So I decided to return to my scientific roots and explore images of fruitfly embryogenesis. . The BDGP project . In 2009 the Berkeley Drosophila Genome Project documented the expression patterns of most fruitfly genes using in situ hybridization. The researcherstook a large number of digital images of individual embryos, each stained with a specific probe to highlight the transcripts of one gene. . In total, the BDGP project examined 8532 genes and documented them with 140427 digital photographs. . Embryonic development takes about 22 hours and has been subdivided into separate stages discernable under the microscope. . . Here is the expression of one gene, Ecdysone-inducible gene L2 (* ImpL2*) at stage 7 of development, for example: . . Gene expression is dynamic, e.g. it changes over time as the embryo develops. To see how ImpL2 changes over time, check out the BDGP‚Äôs full report . After staining and imaging a large number of fruitfly embryos (Weiszmann et al, 2009), the researchers carefully . Identified single embryos in the field of view, and cropped the image accordingly. | Oriented each image so that the anterior end of the embryo faced left. | Assigned a developmental stage. | Described the (often complex) expression patterns they observed using a controlled vocabulary of anatomical terms. | Using this large image dataset, the BDGP project performed and published numerous analyses, e.g. . Global analysis of patterns of gene expression during Drosophila embryogenesis | . . Systematic image-driven analysis of the spatial Drosophila embryonic expression landscape | A quantitative spatiotemporal atlas of gene expression in the Drosophila blastoderm | . and many more. . The images have been made available publicly, e.g. via this site - 250 GB of image data in total. . Other researchers have used this resource and implemented machine learning models, e.g. . Automated annotation of developmental stages of Drosophila embryos | AnnoFly: annotating Drosophila embryonic images based on an attention-enhanced RNN model | Deep Low-Shot Learning for Biological Image Classification | . Unfortunately, the FTP server requires a login/password, which is not provided on the page. The [contacts](https://insitu.fruitfly.org/cgi-bin/ex/insitu.pl?t=html&amp;p=contact_us) form seems to be broken (not surprising for a website of a research project conducted more than 10 years ago). I contaced [Susan Celniker](https://www.genetics.org/content/204/3/845), a researcher at the Lawrence Berkeley National Laborator and key driver of the Drosophila genome / BDGP efforts to see if she could help me out ü§ûüèª. The BDGP FTP server is up serving anonmous requests without a login again! Thanks a lot, BDGP team! . Fly-FISH . Another project used fluorescent microscopy to generate even higher resolution images of gene expression patterns during fruitfly embryogenesis: Fly-FISH . The images have sub-cellular resolution and are beautiful: .",
            "url": "https://tomsing1.github.io/blog/fastai/fruitflies/2020/11/29/BDGP_in_situ_hybridization.html",
            "relUrl": "/fastai/fruitflies/2020/11/29/BDGP_in_situ_hybridization.html",
            "date": " ‚Ä¢ Nov 29, 2020"
        }
        
    
  
    
  
    
        ,"post3": {
            "title": "Diving into python (again)",
            "content": "When I first started to use computational methods as a PhD student, python was the first programming language I learned. I loved both it‚Äôs clear syntax and the philosophy behind it. More recently, I have mainly been using R for my analyses, but still return to python e.g. to write multi-step workflows e.g. using Snakemake or Luigi. . In 2018, I had a chance to attend the fastai course taught by Jeremy Howard at the University of San Francisco. It was a great introduction into the field, but unfortunately I didn‚Äôt find the time to dive more deeply into it. Luckily, the fastai team just published much of their material as a book and also made the underlying Jupyter notebooks available. Time for another deep dive into neural networks, python, Jupyter notebooks, Numpy an more! . First, I needed to remind myself of a few features of python, e.g. the different types of methods used in object oriented programming or how to use the relatively recent pathlib standard module. . Here are a few online resources I found helpful: . Python . Virtual environments | Instance, class and static methods | Paths in python &gt;= 3.4 and this handy cheat sheet | Python string formatting | . Working in Jupyter . Jupyter debugger | . Numpy . Indexing arrays | Axes | . Matplotlib . Tutorial A Figure object is the outermost container for a matplotlib graphic, which can contain multiple Axes objects. One source of confusion is the name: an Axes actually translates into what we think of as an individual plot or graph. . | . Graphviz . Examples | .",
            "url": "https://tomsing1.github.io/blog/python/fastai/2020/11/07/python.html",
            "relUrl": "/python/fastai/2020/11/07/python.html",
            "date": " ‚Ä¢ Nov 7, 2020"
        }
        
    
  
    
  
    
  
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Personal blog of Thomas Sandmann, a Computational Biologist working at Denali Therapeutics in South San Francisco, California, USA 1. . I am passionate and opinionated about many things, including neuroscience, oncology, drug discovery, genetics, teaching, and learning new things. Oh, and cats üêà. . If you are curious about my work, check out my Google Scholar profile. . The opinions expressed here are solely my own and do not express the views or opinions of my employer .¬†&#8617; . |",
          "url": "https://tomsing1.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://tomsing1.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}